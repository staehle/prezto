# Staehle ZSH Theme w/ Fish collapsed path and pretty colors.
# Based off of Sorin, SKWP, Josh, and inspiration from others.

# Load dependencies.
pmodload 'helper'

function _fish_pwd_perl {
  _prompt_pwd=$(pwd | perl -pe '
   BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
   }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
')
}

function _fish_pwd_sh {
  local pwd="${PWD/#$HOME/~}"
  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_pwd="$MATCH"
    unset MATCH
  else
    _prompt_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

function prompt_staehle_async_callback {
  case $1 in
    prompt_staehle_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_pre_target _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_git" ]]; then
          _prompt_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        _prompt_git="${_git_pre_target}${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
    "[async]")
      # Code is 1 for corrupted worker output and 2 for dead worker.
      if [[ $2 -eq 2 ]]; then
	  # Our worker died unexpectedly.
          typeset -g prompt_prezto_async_init=0
      fi
      ;;
  esac
}

function prompt_staehle_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info[status]}
  fi
}

function prompt_staehle_async_tasks {
  # Initialize async worker. This needs to be done here so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_staehle -n
    async_register_callback prompt_staehle prompt_staehle_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_staehle

  # Compute slow commands in the background.
  async_job prompt_staehle prompt_staehle_async_git "$PWD"
}

function prompt_staehle_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _fish_pwd_perl

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_cur_git_root ]]; then
      _prompt_git=''
      _cur_git_root=$new_git_root
    fi
  fi

  # Run python info (this should be fast and not require any async)
  if (( $+functions[python-info] )); then
    python-info
  fi

  prompt_staehle_async_tasks
}

function prompt_staehle_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_staehle_precmd

  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Use extended color pallete if available.
  if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then
    # https://jonasjacek.github.io/colors/
    C_TURQ="%F{81}"  # Turquoise
    C_ORNG="%F{202}" # Orange
    C_PURP="%F{135}" # Purple
    C_PINK="%F{201}" # Hotpink
    C_LIME="%F{118}" # Limegreen
    C_BLUE="%F{69}"  # Blue
    C_RED="%F{196}"  # Red
    C_GREY="%F{244}" # Mid-Gray

  else
    C_TURQ="%F{cyan}"
    C_ORNG="%F{yellow}"
    C_PURP="%F{magenta}"
    C_PINK="%F{red}"
    C_LIME="%F{green}"
    C_BLUE="%F{blue}"
    C_RED="%F{red}"
    C_GREY=""
  fi
  C_RESET="%f"

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format "%B%(!.${C_PINK}#.%(?.${C_LIME}.${C_RED})❯)%f%b"
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %B%F{red}OVR%f%b '
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format " %%B%${C_LIME}✚%f%%b"
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{yellow}⬆%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{yellow}⬇%f%%b'
  zstyle ':prezto:module:git:info:deleted' format " %%B${C_RED}×%f%%b"
  zstyle ':prezto:module:git:info:modified' format " %%B${C_BLUE}✱%f%%b"
  zstyle ':prezto:module:git:info:renamed' format " %%B${C_PINK}➜%f%%b"
  zstyle ':prezto:module:git:info:stashed' format " %%B${C_TURQ}✭%f%%b"
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{yellow}═%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{white}◼%f%%b'

  zstyle ':prezto:module:git:info:branch' format " %%B${C_PURP}%b%f%%b"
  zstyle ':prezto:module:git:info:position' format " %%B${C_RED}%p%f%%b"
  zstyle ':prezto:module:git:info:commit' format " %%B${C_GREY}%.7c%f%%b"

  #zstyle ':prezto:module:git:info:keys' format \
	  #  'status' "$(coalesce "%b" "%p" "%c")%s%A%B%S%a%d%m%r%U%u"
  zstyle ':prezto:module:git:info:keys' format \
    'status' '%A%B%S%a%d%m%r%U%u :%b %p %c:%s'

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '%f%F{3}(%v)%F{7} '

  # Set up non-zero return value display
  _show_return=""
  # Default is to show the return value
  if zstyle -T ':prezto:module:prompt' show-return-val; then
    _show_return="%(?::${C_RED}%?%f )"
  fi

  # Get the async worker set up.
  _cur_git_root=''
  _prompt_git=''

  # Define prompts.
  _userdisp="${C_BLUE}%n"
  [ $UID -eq 0 ] && _userdisp="${C_RED}[[ ROOT ]]"

  PROMPT='${_userdisp}'                             # 'username'
  PROMPT+='${C_GREY}@${C_ORNG}%m${C_RESET} '        # '@machine '
  PROMPT+='%B${C_TURQ}${_prompt_pwd}%f%b '          # '~/f/path'
  PROMPT+='${_show_return}${editor_info[keymap]} '  # '❯' or '#' prompt, colored

  RPROMPT='$python_info[virtualenv]${editor_info[overwrite]}${VIM:+" %B%F{green}V%f%b"}${_prompt_git}'

  SPROMPT="zsh: correct ${C_PINK}%R%f to ${C_LIME}%r%f [nyae]? "
}

prompt_staehle_setup "$@"
# vim: ft=zsh
